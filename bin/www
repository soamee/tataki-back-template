#!/usr/bin/env node
const http = require('http');
const logger = require('../components/logger')({});
const createApp = require('../app');
const { initDatabase } = require('../db');
const packageJSON = require('../package.json');

const { ENVIRONMENT, PORT } = require('../config');

let port;
let server;

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  logger.info(`${packageJSON.name} service ${ENVIRONMENT} listening on ${bind}`);
}

function normalizePort(val) {
  const candidatePort = parseInt(val, 10);

  if (isNaN(candidatePort)) {
    return val;
  }

  if (candidatePort >= 0) {
    return candidatePort;
  }

  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  switch (error.code) {
    case 'EACCES':
      logger.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

const runServer = async () => {
  const app = await createApp();
  await initDatabase();

  port = normalizePort(process.env.PORT || PORT);
  app.set('port', port);

  server = http.createServer(app);

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
};

runServer();
